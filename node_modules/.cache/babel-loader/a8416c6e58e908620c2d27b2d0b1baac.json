{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nconst isServer = typeof window === 'undefined';\n\nclass _class extends _react.Component {\n  constructor(props) {\n    super(props);\n\n    this.emitChange = () => {\n      if (this._hasHeadManager) {\n        this.props.headManager.updateHead(this.props.reduceComponentsToState([...this.props.headManager.mountedInstances], this.props));\n      }\n    };\n\n    this._hasHeadManager = this.props.headManager && this.props.headManager.mountedInstances;\n\n    if (isServer && this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this);\n      this.emitChange();\n    }\n  }\n\n  componentDidMount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this);\n    }\n\n    this.emitChange();\n  }\n\n  componentDidUpdate() {\n    this.emitChange();\n  }\n\n  componentWillUnmount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.delete(this);\n    }\n\n    this.emitChange();\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexports.default = _class;","map":{"version":3,"sources":["../../../shared/lib/side-effect.tsx"],"names":[],"mappings":";;;;;;;AAAiC,IAAA,MAAO,GAAA,OAAA,CAAA,OAAA,CAAP;;AAEjC,MAAM,QAAQ,GAAA,OAAU,MAAV,KAAgB,WAA9B;;qBAFiC,MAAO,CAAA,S,CAAA;cA8B1B,K,EAAY;AACtB,UAAM,KAAN;;SAZF,U,GAAU,MAAe;AACvB,UAAE,KAAO,eAAT,EAA0B;aACnB,K,CAAM,W,CAAY,U,CAAU,KAC1B,KAD0B,CACpB,uBADoB,CACG,C,QACvB,K,CAAM,W,CAAY,gBADK,CADH,E,KAGxB,KAHwB,C;AAMlC;AACF,K;;SAIM,e,GAAe,KACb,KADa,CACP,WADO,IACI,KAAS,KAAT,CAAe,WAAf,CAA2B,gB;;AAEnD,QAAI,QAAQ,IAAA,KAAS,eAArB,EAAsC;WAC/B,K,CAAM,W,CAAY,gB,CAAiB,G,CAAG,I;WACtC,U;AACN;AACF;;AACD,EAAA,iBAAiB,GAAG;AAClB,QAAE,KAAO,eAAT,EAA0B;WACnB,K,CAAM,W,CAAY,gB,CAAiB,G,CAAG,I;AAC5C;;SACI,U;AACN;;AACD,EAAA,kBAAkB,GAAG;SACd,U;AACN;;AACD,EAAA,oBAAoB,GAAG;AACrB,QAAE,KAAO,eAAT,EAA0B;WACnB,K,CAAM,W,CAAY,gB,CAAiB,M,CAAM,I;AAC/C;;SACI,U;AACN;;AAED,EAAA,MAAM,GAAG;WACA,I;AACR;;AA1DqC","sourcesContent":["import React, { Component } from 'react'\n\nconst isServer = typeof window === 'undefined'\n\ntype State = JSX.Element[] | undefined\n\ntype SideEffectProps = {\n  reduceComponentsToState: <T>(\n    components: Array<React.ReactElement<any>>,\n    props: T\n  ) => State\n  handleStateChange?: (state: State) => void\n  headManager: any\n  inAmpMode?: boolean\n}\n\nexport default class extends Component<SideEffectProps> {\n  private _hasHeadManager: boolean\n\n  emitChange = (): void => {\n    if (this._hasHeadManager) {\n      this.props.headManager.updateHead(\n        this.props.reduceComponentsToState(\n          [...this.props.headManager.mountedInstances],\n          this.props\n        )\n      )\n    }\n  }\n\n  constructor(props: any) {\n    super(props)\n    this._hasHeadManager =\n      this.props.headManager && this.props.headManager.mountedInstances\n\n    if (isServer && this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n      this.emitChange()\n    }\n  }\n  componentDidMount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n    }\n    this.emitChange()\n  }\n  componentDidUpdate() {\n    this.emitChange()\n  }\n  componentWillUnmount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.delete(this)\n    }\n    this.emitChange()\n  }\n\n  render() {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"script"}