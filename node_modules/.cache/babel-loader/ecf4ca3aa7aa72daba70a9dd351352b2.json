{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultHead = defaultHead;\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _sideEffect = _interopRequireDefault(require(\"./side-effect\"));\n\nvar _ampContext = require(\"./amp-context\");\n\nvar _headManagerContext = require(\"./head-manager-context\");\n\nvar _amp = require(\"./amp\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction defaultHead(inAmpMode = false) {\n  const head = [/*#__PURE__*/_react.default.createElement(\"meta\", {\n    charSet: \"utf-8\"\n  })];\n\n  if (!inAmpMode) {\n    head.push( /*#__PURE__*/_react.default.createElement(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width\"\n    }));\n  }\n\n  return head;\n}\n\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list;\n  } // Adds support for React.Fragment\n\n\n  if (child.type === _react.default.Fragment) {\n    return list.concat(_react.default.Children.toArray(child.props.children).reduce((fragmentList, fragmentChild) => {\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n        return fragmentList;\n      }\n\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n\n  return list.concat(child);\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\n\nfunction unique() {\n  const keys = new Set();\n  const tags = new Set();\n  const metaTypes = new Set();\n  const metaCategories = {};\n  return h => {\n    let isUnique = true;\n    let hasKey = false;\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true;\n      const key = h.key.slice(h.key.indexOf('$') + 1);\n\n      if (keys.has(key)) {\n        isUnique = false;\n      } else {\n        keys.add(key);\n      }\n    } // eslint-disable-next-line default-case\n\n\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false;\n        } else {\n          tags.add(h.type);\n        }\n\n        break;\n\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false;\n            } else {\n              metaTypes.add(metatype);\n            }\n          } else {\n            const category = h.props[metatype];\n            const categories = metaCategories[metatype] || new Set();\n\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false;\n            } else {\n              categories.add(category);\n              metaCategories[metatype] = categories;\n            }\n          }\n        }\n\n        break;\n    }\n\n    return isUnique;\n  };\n}\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\n\n\nfunction reduceComponents(headElements, props) {\n  return headElements.reduce((list, headElement) => {\n    const headElementChildren = _react.default.Children.toArray(headElement.props.children);\n\n    return list.concat(headElementChildren);\n  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map((c, i) => {\n    const key = c.key || i;\n\n    if (process.env.NODE_ENV !== 'development' && process.env.__NEXT_OPTIMIZE_FONTS && !props.inAmpMode) {\n      if (c.type === 'link' && c.props['href'] && // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n      ['https://fonts.googleapis.com/css', 'https://use.typekit.net/'].some(url => c.props['href'].startsWith(url))) {\n        const newProps = { ...(c.props || {})\n        };\n        newProps['data-href'] = newProps['href'];\n        newProps['href'] = undefined; // Add this attribute to make it easy to identify optimized tags\n\n        newProps['data-optimized-fonts'] = true;\n        return /*#__PURE__*/_react.default.cloneElement(c, newProps);\n      }\n    }\n\n    return /*#__PURE__*/_react.default.cloneElement(c, {\n      key\n    });\n  });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\n\n\nfunction Head({\n  children\n}) {\n  const ampState = (0, _react).useContext(_ampContext.AmpStateContext);\n  const headManager = (0, _react).useContext(_headManagerContext.HeadManagerContext);\n  return /*#__PURE__*/_react.default.createElement(_sideEffect.default, {\n    reduceComponentsToState: reduceComponents,\n    headManager: headManager,\n    inAmpMode: (0, _amp).isInAmpMode(ampState)\n  }, children);\n}\n\nvar _default = Head;\nexports.default = _default;","map":{"version":3,"sources":["../../../shared/lib/head.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport Effect from './side-effect'\nimport { AmpStateContext } from './amp-context'\nimport { HeadManagerContext } from './head-manager-context'\nimport { isInAmpMode } from './amp'\n\ntype WithInAmpMode = {\n  inAmpMode?: boolean\n}\n\nexport function defaultHead(inAmpMode = false): JSX.Element[] {\n  const head = [<meta charSet=\"utf-8\" />]\n  if (!inAmpMode) {\n    head.push(<meta name=\"viewport\" content=\"width=device-width\" />)\n  }\n  return head\n}\n\nfunction onlyReactElement(\n  list: Array<React.ReactElement<any>>,\n  child: React.ReactChild\n): Array<React.ReactElement<any>> {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list\n  }\n  // Adds support for React.Fragment\n  if (child.type === React.Fragment) {\n    return list.concat(\n      React.Children.toArray(child.props.children).reduce(\n        (\n          fragmentList: Array<React.ReactElement<any>>,\n          fragmentChild: React.ReactChild\n        ): Array<React.ReactElement<any>> => {\n          if (\n            typeof fragmentChild === 'string' ||\n            typeof fragmentChild === 'number'\n          ) {\n            return fragmentList\n          }\n          return fragmentList.concat(fragmentChild)\n        },\n        []\n      )\n    )\n  }\n  return list.concat(child)\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']\n\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set()\n  const tags = new Set()\n  const metaTypes = new Set()\n  const metaCategories: { [metatype: string]: Set<string> } = {}\n\n  return (h: React.ReactElement<any>) => {\n    let isUnique = true\n    let hasKey = false\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true\n      const key = h.key.slice(h.key.indexOf('$') + 1)\n      if (keys.has(key)) {\n        isUnique = false\n      } else {\n        keys.add(key)\n      }\n    }\n\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false\n        } else {\n          tags.add(h.type)\n        }\n        break\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i]\n          if (!h.props.hasOwnProperty(metatype)) continue\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false\n            } else {\n              metaTypes.add(metatype)\n            }\n          } else {\n            const category = h.props[metatype]\n            const categories = metaCategories[metatype] || new Set()\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false\n            } else {\n              categories.add(category)\n              metaCategories[metatype] = categories\n            }\n          }\n        }\n        break\n    }\n\n    return isUnique\n  }\n}\n\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\nfunction reduceComponents(\n  headElements: Array<React.ReactElement<any>>,\n  props: WithInAmpMode\n) {\n  return headElements\n    .reduce(\n      (list: React.ReactChild[], headElement: React.ReactElement<any>) => {\n        const headElementChildren = React.Children.toArray(\n          headElement.props.children\n        )\n        return list.concat(headElementChildren)\n      },\n      []\n    )\n    .reduce(onlyReactElement, [])\n    .reverse()\n    .concat(defaultHead(props.inAmpMode))\n    .filter(unique())\n    .reverse()\n    .map((c: React.ReactElement<any>, i: number) => {\n      const key = c.key || i\n      if (\n        process.env.NODE_ENV !== 'development' &&\n        process.env.__NEXT_OPTIMIZE_FONTS &&\n        !props.inAmpMode\n      ) {\n        if (\n          c.type === 'link' &&\n          c.props['href'] &&\n          // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n          ['https://fonts.googleapis.com/css', 'https://use.typekit.net/'].some(\n            (url) => c.props['href'].startsWith(url)\n          )\n        ) {\n          const newProps = { ...(c.props || {}) }\n          newProps['data-href'] = newProps['href']\n          newProps['href'] = undefined\n\n          // Add this attribute to make it easy to identify optimized tags\n          newProps['data-optimized-fonts'] = true\n\n          return React.cloneElement(c, newProps)\n        }\n      }\n      return React.cloneElement(c, { key })\n    })\n}\n\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head({ children }: { children: React.ReactNode }) {\n  const ampState = useContext(AmpStateContext)\n  const headManager = useContext(HeadManagerContext)\n  return (\n    <Effect\n      reduceComponentsToState={reduceComponents}\n      headManager={headManager}\n      inAmpMode={isInAmpMode(ampState)}\n    >\n      {children}\n    </Effect>\n  )\n}\n\nexport default Head\n"]},"metadata":{},"sourceType":"script"}